// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2021 Security Scorecard Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package results

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/ossf/scorecard-webapp/app/generated/models"
)

// NewPostResultParams creates a new PostResultParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostResultParams() *PostResultParams {
	return &PostResultParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostResultParamsWithTimeout creates a new PostResultParams object
// with the ability to set a timeout on a request.
func NewPostResultParamsWithTimeout(timeout time.Duration) *PostResultParams {
	return &PostResultParams{
		timeout: timeout,
	}
}

// NewPostResultParamsWithContext creates a new PostResultParams object
// with the ability to set a context for a request.
func NewPostResultParamsWithContext(ctx context.Context) *PostResultParams {
	return &PostResultParams{
		Context: ctx,
	}
}

// NewPostResultParamsWithHTTPClient creates a new PostResultParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostResultParamsWithHTTPClient(client *http.Client) *PostResultParams {
	return &PostResultParams{
		HTTPClient: client,
	}
}

/*
PostResultParams contains all the parameters to send to the API endpoint

	for the post result operation.

	Typically these are written to a http.Request.
*/
type PostResultParams struct {

	/* Org.

	   Name of the owner/organization of the repository
	*/
	Org string

	/* Platform.

	   VCS platform. eg. github.com
	*/
	Platform string

	// Publish.
	Publish *models.VerifiedScorecardResult

	/* Repo.

	   Name of the repository
	*/
	Repo string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostResultParams) WithDefaults() *PostResultParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostResultParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the post result params
func (o *PostResultParams) WithTimeout(timeout time.Duration) *PostResultParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post result params
func (o *PostResultParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post result params
func (o *PostResultParams) WithContext(ctx context.Context) *PostResultParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post result params
func (o *PostResultParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post result params
func (o *PostResultParams) WithHTTPClient(client *http.Client) *PostResultParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post result params
func (o *PostResultParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrg adds the org to the post result params
func (o *PostResultParams) WithOrg(org string) *PostResultParams {
	o.SetOrg(org)
	return o
}

// SetOrg adds the org to the post result params
func (o *PostResultParams) SetOrg(org string) {
	o.Org = org
}

// WithPlatform adds the platform to the post result params
func (o *PostResultParams) WithPlatform(platform string) *PostResultParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the post result params
func (o *PostResultParams) SetPlatform(platform string) {
	o.Platform = platform
}

// WithPublish adds the publish to the post result params
func (o *PostResultParams) WithPublish(publish *models.VerifiedScorecardResult) *PostResultParams {
	o.SetPublish(publish)
	return o
}

// SetPublish adds the publish to the post result params
func (o *PostResultParams) SetPublish(publish *models.VerifiedScorecardResult) {
	o.Publish = publish
}

// WithRepo adds the repo to the post result params
func (o *PostResultParams) WithRepo(repo string) *PostResultParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the post result params
func (o *PostResultParams) SetRepo(repo string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *PostResultParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param org
	if err := r.SetPathParam("org", o.Org); err != nil {
		return err
	}

	// path param platform
	if err := r.SetPathParam("platform", o.Platform); err != nil {
		return err
	}
	if o.Publish != nil {
		if err := r.SetBodyParam(o.Publish); err != nil {
			return err
		}
	}

	// path param repo
	if err := r.SetPathParam("repo", o.Repo); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
