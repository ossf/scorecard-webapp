// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2021 Security Scorecard Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package badge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetBadgeParams creates a new GetBadgeParams object
// with the default values initialized.
func NewGetBadgeParams() GetBadgeParams {

	var (
		// initialize parameters with default values

		styleDefault = string("flat")
	)

	return GetBadgeParams{
		Style: &styleDefault,
	}
}

// GetBadgeParams contains all the bound params for the get badge operation
// typically these are obtained from a http.Request
//
// swagger:parameters getBadge
type GetBadgeParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Name of the owner/organization of the repository
	  Required: true
	  In: path
	*/
	Org string
	/*VCS platform. eg. github.com
	  Required: true
	  In: path
	*/
	Platform string
	/*Name of the repository
	  Required: true
	  In: path
	*/
	Repo string
	/*Style to render the badge
	  In: query
	  Default: "flat"
	*/
	Style *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetBadgeParams() beforehand.
func (o *GetBadgeParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rOrg, rhkOrg, _ := route.Params.GetOK("org")
	if err := o.bindOrg(rOrg, rhkOrg, route.Formats); err != nil {
		res = append(res, err)
	}

	rPlatform, rhkPlatform, _ := route.Params.GetOK("platform")
	if err := o.bindPlatform(rPlatform, rhkPlatform, route.Formats); err != nil {
		res = append(res, err)
	}

	rRepo, rhkRepo, _ := route.Params.GetOK("repo")
	if err := o.bindRepo(rRepo, rhkRepo, route.Formats); err != nil {
		res = append(res, err)
	}

	qStyle, qhkStyle, _ := qs.GetOK("style")
	if err := o.bindStyle(qStyle, qhkStyle, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOrg binds and validates parameter Org from path.
func (o *GetBadgeParams) bindOrg(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Org = raw

	return nil
}

// bindPlatform binds and validates parameter Platform from path.
func (o *GetBadgeParams) bindPlatform(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Platform = raw

	return nil
}

// bindRepo binds and validates parameter Repo from path.
func (o *GetBadgeParams) bindRepo(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route
	o.Repo = raw

	return nil
}

// bindStyle binds and validates parameter Style from query.
func (o *GetBadgeParams) bindStyle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetBadgeParams()
		return nil
	}
	o.Style = &raw

	if err := o.validateStyle(formats); err != nil {
		return err
	}

	return nil
}

// validateStyle carries on validations for parameter Style
func (o *GetBadgeParams) validateStyle(formats strfmt.Registry) error {

	if err := validate.EnumCase("style", "query", *o.Style, []interface{}{"plastic", "flat", "flat-square", "for-the-badge", "social"}, true); err != nil {
		return err
	}

	return nil
}
