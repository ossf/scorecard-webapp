// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2021 Security Scorecard Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package badge

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/ossf/scorecard-webapp/app/generated/models"
)

// GetBadgeFoundCode is the HTTP code returned for type GetBadgeFound
const GetBadgeFoundCode int = 302

/*
GetBadgeFound Scorecard badge for the repository

swagger:response getBadgeFound
*/
type GetBadgeFound struct {
}

// NewGetBadgeFound creates GetBadgeFound with default headers values
func NewGetBadgeFound() *GetBadgeFound {

	return &GetBadgeFound{}
}

// WriteResponse to the client
func (o *GetBadgeFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(302)
}

/*
GetBadgeDefault There was an internal error in the server while processing the request

swagger:response getBadgeDefault
*/
type GetBadgeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetBadgeDefault creates GetBadgeDefault with default headers values
func NewGetBadgeDefault(code int) *GetBadgeDefault {
	if code <= 0 {
		code = 500
	}

	return &GetBadgeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get badge default response
func (o *GetBadgeDefault) WithStatusCode(code int) *GetBadgeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get badge default response
func (o *GetBadgeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get badge default response
func (o *GetBadgeDefault) WithPayload(payload *models.Error) *GetBadgeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get badge default response
func (o *GetBadgeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetBadgeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
